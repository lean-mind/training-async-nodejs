{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"7e5879950e95f57dd213","result":{"data":{"deck":{"id":"7b67ee2c-cb84-583b-9477-b5507d387f11","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Asincron\\xEDa en Node.js\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"\\xBFPor qu\\xE9 Node.js y no JavaScript? Porque con Node.js sabemos cu\\xE1l es el\\nproceso ya que siempre tira del mismo motor, el V8 de Google. Sin embargo,\\ncada navegador, a menos que tire de Chromium, implementa su propio motor de\\nJavaScript que puede tener sus variaciones con respecto al V8.\"), mdx(\"p\", null, \"T\\xE9cnicamente todo lo que veamos hoy deber\\xEDa ser v\\xE1lido para JavaScript, a\\nexcepci\\xF3n de las librer\\xEDas propias de Node.js que usemos.\"), mdx(\"p\", null, \"A promise is commonly defined as a proxy for a value that will eventually become available.\"), mdx(\"p\", null, \"De esto va la asincron\\xEDa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a value that will eventually become available\"))), mdx(Logo, {\n    mdxType: \"Logo\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Ahora y despu\\xE9s\"), mdx(Logo, {\n    mdxType: \"Logo\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Ahora y después\\\"\",\n    \"title\": \"\\\"Ahora\",\n    \"y\": true,\n    \"después\\\"\": true\n  }), \"log('Before reading file.')\\n\\nfs.readFile(path.resolve('./demo/data.txt'), (err, data) => {\\n  if (err) {\\n    throw err\\n  }\\n  log(`The file has ${data.length} characters.`)\\n})\\n\\nlog('After reading file.')\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Ahora y después\\\" 1\",\n    \"title\": \"\\\"Ahora\",\n    \"y\": true,\n    \"después\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Ahora y después\\\" 3:8\",\n    \"title\": \"\\\"Ahora\",\n    \"y\": true,\n    \"después\\\"\": true,\n    \"3:8\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Ahora y después\\\"  10\",\n    \"title\": \"\\\"Ahora\",\n    \"y\": true,\n    \"después\\\"\": true,\n    \"\": true\n  }), \"\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"En JavaScript hay veces q\"), mdx(Logo, {\n    mdxType: \"Logo\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Ahora y despu\\xE9s\"), mdx(\"img\", {\n    src: nowAndThen\n  }), mdx(Logo, {\n    mdxType: \"Logo\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"\\xBFQu\\xE9 es el event loop?\"), mdx(ImageWithDescription, {\n    src: eventLoop,\n    alt: \"Node.js Schema\",\n    id: \"node-event-loop\",\n    mdxType: \"ImageWithDescription\"\n  }, \"Imagen de https://www.tutorialandexample.com\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"The event loop is what allows Node.js to perform non-blocking I/O operations \\u2014 despite the fact that JavaScript is single-threaded \\u2014 by offloading operations to the system kernel whenever possible.\", mdx(\"p\", null, \"Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background. When one of these operations completes, the kernel tells Node.js so that the appropriate callback may be added to the poll queue to eventually be executed. We'll explain this in further detail later in this topic.\")), mdx(Logo, {\n    mdxType: \"Logo\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Blocking VS Non-blocking\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"As an example, let's consider a case where each request to a web server takes 50ms to complete and 45ms of that 50ms is database I/O that can be done asynchronously. Choosing non-blocking asynchronous operations frees up that 45ms per request to handle other requests. This is a significant difference in capacity just by choosing to use non-blocking methods instead of blocking methods.\"), mdx(Logo, {\n    mdxType: \"Logo\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title='Ventajas del async/await frente al callback'\",\n    \"title\": \"'Ventajas\",\n    \"del\": true,\n    \"async/await\": true,\n    \"frente\": true,\n    \"al\": true,\n    \"callback'\": true\n  }), \"import * as fs from 'fs'\\n\\nlog('Before reading file.')\\n\\nfs.readFile(path.resolve('./demo/data.txt'), (err, data) => {\\n  if (err) {\\n    throw err\\n  }\\n  log(`The file has ${data.length} characters.`)\\n})\\n\\nlog('After reading file.')\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title='Ventajas del async/await frente al callback'\",\n    \"title\": \"'Ventajas\",\n    \"del\": true,\n    \"async/await\": true,\n    \"frente\": true,\n    \"al\": true,\n    \"callback'\": true\n  }), \"import * as fs from 'fs/promises'\\n\\nlog('Before reading file.')\\n\\nconst data = await fs.readFile(path.resolve('./demo/data.txt'))\\nlog(`The file has ${data.length} characters.`)\\n\\nlog('After reading file.')\\n\"))), mdx(Logo, {\n    mdxType: \"Logo\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Documentaci\\xF3n\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/jxnblk/mdx-deck/blob/73b90eb9a353d300cc9e5ddf3070bb6868298275/docs/components.md\"\n  }), \"Componentes de MDX Deck\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/jxnblk/mdx-deck/blob/73b90eb9a353d300cc9e5ddf3070bb6868298275/docs/layouts.md\"\n  }), \"Layout de MDX Deck\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://codesurfer.pomb.us\"\n  }), \"Code Surfer\"))), mdx(Logo, {\n    mdxType: \"Logo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7b67ee2c-cb84-583b-9477-b5507d387f11","slug":"","title":"Asincronía en Node.js"}}}